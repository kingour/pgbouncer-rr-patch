diff --git a/src/loader.c b/src/loader.c
index 4018d78..fd00572 100644
--- a/src/loader.c
+++ b/src/loader.c
@@ -32,6 +32,12 @@
 
 bool any_user_level_timeout_set;
 bool any_user_level_client_timeout_set;
+/*
+ * Dynamic array for databases that can participate in a fast switchover operation.
+ */
+PgDatabase **fast_switchover_db = NULL;
+int fast_switchover_configured_db_count = 0;
+int fast_switchover_db_capacity = 0;
 
 /* parse parameter name before '=' */
 static char *cstr_get_key(char *p, char **dst_p)
@@ -57,12 +63,20 @@ static char *cstr_unquote_value(char *p)
 	while (1) {
 		if (!*p)
 			return NULL;
+		/* Support escaping single quotes */
+		if (p[0] == '\\') {
+			if (p[1] == '\'') {
+				p++;
+				goto increment;
+			}
+		}
 		if (p[0] == '\'') {
 			if (p[1] == '\'')
 				p++;
 			else
 				break;
 		}
+increment:
 		*s++ = *p++;
 	}
 	/* terminate actual value */
@@ -243,6 +257,117 @@ fail:
 	free(host);
 	return false;
 }
+
+PgPool *new_pool_from_db(PgDatabase *db, char *dbname, char *hostname, int port)
+{
+	PgPool *pool;
+	PgDatabase *new_db = find_database(dbname);
+	if (new_db) {
+		log_debug("db already exists, so won't create db from db: %s", dbname);
+		return NULL;
+	}
+
+	new_db = add_database(dbname);
+	if (!new_db)
+		goto oom;
+
+	if (db->startup_params) {
+		new_db->startup_params = pktbuf_copy(db->startup_params);
+		if (new_db->startup_params == NULL)
+			goto oom;
+	}
+
+	/* tag the db as alive */
+	new_db->db_dead = false;
+	/* assuming not an autodb */
+	new_db->db_auto = false;
+	new_db->inactive_time = 0;
+
+	new_db->host = strdup(hostname);
+	if (!new_db->host)
+		goto oom;
+
+	new_db->port = port;
+	new_db->pool_size = db->pool_size;
+	new_db->min_pool_size = db->min_pool_size;
+	new_db->res_pool_size = db->res_pool_size;
+	new_db->pool_mode = db->pool_mode;
+	new_db->max_db_connections = db->max_db_connections;
+	if (db->connect_query) {
+		new_db->connect_query = strdup(db->connect_query);
+		if (!new_db->connect_query)
+			goto oom;
+	}
+	if (new_db->topology_query) {
+		new_db->topology_query = strdup(db->topology_query);
+		if (!new_db->topology_query)
+			goto oom;
+	}
+	if (new_db->recovery_query) {
+		new_db->recovery_query = strdup(db->recovery_query);
+		if (!new_db->recovery_query)
+			goto oom;
+	}
+	if (db->auth_dbname) {
+		new_db->auth_dbname = strdup(db->auth_dbname);
+		if (!new_db->auth_dbname)
+			goto oom;
+	}
+
+	if (db->forced_user_credentials) {
+		if (!force_user_credentials(new_db, db->forced_user_credentials->name, db->forced_user_credentials->passwd)) {;
+			goto oom;
+		}
+	}
+
+	log_debug("creating pool for %s", new_db->name);
+	pool = get_pool(new_db, new_db->forced_user_credentials);
+	if (!pool) {
+		fatal("pool could not be created for %s", new_db->name);
+		goto oom;
+	}
+	return pool;
+
+oom:
+	die("out of memory");
+}
+
+/*
+ * Adds a PgDatabase pointer to the dynamically growing fast_switchover_db array.
+ *
+ * This function ensures that the array has sufficient capacity by reallocating
+ * memory when needed. It starts with an initial capacity of 8 and doubles the
+ * size each time the current capacity is reached.
+ *
+ * Parameters:
+ *   db - Pointer to the PgDatabase to add to the fast switchover list.
+ *
+ * On allocation failure, the function calls fatal(), terminating the program.
+ */
+
+static void add_fast_switchover_db(PgDatabase *db)
+{
+	if (fast_switchover_configured_db_count >= fast_switchover_db_capacity) {
+		// Initial capacity of 8, double the size when needed
+		int new_capacity = fast_switchover_db_capacity == 0 ? 8 : fast_switchover_db_capacity * 2;
+		// Check for overflow
+		if (new_capacity < fast_switchover_db_capacity) {
+			fatal("fast_switchover_db capacity overflow");
+			return;
+		}
+
+		PgDatabase **new_array = realloc(fast_switchover_db, new_capacity * sizeof(PgDatabase *));
+		if (!new_array) {
+			fast_switchover_db_capacity = 0;
+			fast_switchover_configured_db_count = 0;
+			fatal("out of memory allocating fast_switchover_db array");
+		}
+		fast_switchover_db = new_array;
+		fast_switchover_db_capacity = new_capacity;
+	}
+	fast_switchover_db[fast_switchover_configured_db_count++] = db;
+}
+
 /* fill PgDatabase from connstr */
 bool parse_database(void *base, const char *name, const char *connstr)
 {
@@ -273,6 +398,8 @@ bool parse_database(void *base, const char *name, const char *connstr)
 	char *datestyle = NULL;
 	char *timezone = NULL;
 	char *connect_query = NULL;
+	char *topology_query = NULL;
+	char *recovery_query = NULL;
 	char *appname = NULL;
 	char *auth_query = NULL;
 
@@ -358,8 +485,35 @@ bool parse_database(void *base, const char *name, const char *connstr)
 				goto fail;
 			}
 		} else if (strcmp("connect_query", key) == 0) {
+			if (topology_query != NULL) {
+				log_error("connect_query cannot be used if topology_query is set");
+				goto fail;
+			}
+			if (recovery_query != NULL) {
+				log_error("connect_query cannot be used if recovery_query is set");
+				goto fail;
+			}
 			if (!set_param_value(&connect_query, val))
 				goto fail;
+		} else if (strcmp("topology_query", key) == 0) {
+			if (connect_query != NULL) {
+				log_error("topology_query cannot be used if connect_query is set");
+				goto fail;
+			}
+			if (!set_param_value(&topology_query, val))
+				goto fail;
+			fast_switchover = true;
+		} else if (strcmp("recovery_query", key) == 0) {
+			if (connect_query != NULL) {
+				log_error("recovery_query cannot be used if connect_query is set");
+				goto fail;
+			}
+			if (topology_query == NULL) {
+				log_error("recovery_query cannot be used if topology_query is not set");
+				goto fail;
+			}
+			if (!set_param_value(&recovery_query, val))
+				goto fail;
 		} else if (strcmp("application_name", key) == 0) {
 			appname = val;
 		} else if (strcmp("auth_query", key) == 0) {
@@ -399,12 +553,16 @@ bool parse_database(void *base, const char *name, const char *connstr)
 			changed = true;
 		} else if (!strcmpeq(connect_query, db->connect_query)) {
 			changed = true;
+		} else if (!strcmpeq(topology_query, db->topology_query)) {
+			changed = true;
 		} else if (!strcmpeq(db->auth_dbname, auth_dbname)) {
 			changed = true;
 		} else if (!strcmpeq(db->auth_query, auth_query)) {
 			changed = true;
 		} else if (load_balance_hosts != db->load_balance_hosts) {
 			changed = true;
+		} else if (!strcmpeq(recovery_query, db->recovery_query)) {
+			changed = true;
 		}
 		if (changed)
 			tag_database_dirty(db);
@@ -423,8 +581,14 @@ bool parse_database(void *base, const char *name, const char *connstr)
 	db->server_lifetime = server_lifetime;
 	db->load_balance_hosts = load_balance_hosts;
 	free(db->connect_query);
+	free(db->topology_query);
+	free(db->recovery_query);
 	db->connect_query = connect_query;
+	db->topology_query = topology_query;
+	db->recovery_query = recovery_query;
 	connect_query = NULL;
+	topology_query = NULL;
+	recovery_query = NULL;
 
 	if (!set_param_value(&db->auth_dbname, auth_dbname))
 		goto fail;
@@ -486,6 +650,10 @@ bool parse_database(void *base, const char *name, const char *connstr)
 	/* remember dbname */
 	db->dbname = (char *)msg->buf + dbname_ofs;
 
+	if (fast_switchover && db->topology_query) {
+		add_fast_switchover_db(db);
+	}
+
 	free(tmp_connstr);
 	return true;
 fail:
